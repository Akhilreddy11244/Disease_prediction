# Importing necessary libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, confusion_matrix
import tkinter as tk
from tkinter import filedialog, messagebox, Scrollbar
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Create the main window
win = tk.Tk()
win.title("Disease Prediction using Machine Learning")
win.geometry("1400x800")
win.config(background="#f0f0f0")  # Light grey background

# UI Elements
l1 = tk.Label(win, text="Upload Dataset:", font=("Arial", 12), bg="#f0f0f0")
l1.grid(row=0, column=0)


data = None


# Function to browse and load the dataset
def browseFiles():
    global data
    filename = filedialog.askopenfilename(initialdir="/", title="Select a File", filetypes=(("CSV files", "*.csv"),))
    try:
        data = pd.read_csv(filename).dropna(axis=1)
        messagebox.showinfo("Message", "Dataset Uploaded Successfully!")
        tb2.insert(tk.END, f"Dataset Loaded: {filename}\n")
        tb2.insert(tk.END, f"Data Shape: {data.shape}\n")
    except Exception as e:
        messagebox.showerror("Error", f"Failed to load dataset!\n{e}")


label_file_explorer = tk.Label(win, text="Select a File", font=("Arial", 12), bg="#f0f0f0")
tb1 = tk.Text(win, height=1, width=40)
tb1.insert(tk.END, "File path")
b1 = tk.Button(win, text="Browse", command=browseFiles, font=("Arial", 12))

label_file_explorer.grid(row=1, column=0)
tb1.grid(row=1, column=1)
b1.grid(row=1, column=2)

# Algorithm selection
l2 = tk.Label(win, text="Select Algorithm", font=("Arial", 12), bg="#f0f0f0")
l2.grid(row=3, column=0)

var = tk.StringVar()


def print_selection():
    tb2.insert(tk.END, "Selected Algorithm: " + var.get() + "\n")


r1 = tk.Radiobutton(win, text='Support Vector Machine', variable=var, value='SVM', command=print_selection,
                    font=("Arial", 12), bg="#f0f0f0")
r2 = tk.Radiobutton(win, text='Naive Bayes', variable=var, value='Naive Bayes', command=print_selection,
                    font=("Arial", 12), bg="#f0f0f0")
r3 = tk.Radiobutton(win, text='Random Forest', variable=var, value='Random Forest', command=print_selection,
                    font=("Arial", 12), bg="#f0f0f0")

r1.grid(row=6, column=0)
r2.grid(row=6, column=1)
r3.grid(row=6, column=2)


# Function to apply the selected algorithm
def apply_algorithm():
    if data is None:
        messagebox.showerror("Error", "Please upload a dataset first!")
        return

    tb2.insert(tk.END, "Processing...\n")

    # Data preparation
    encoder = LabelEncoder()
    data["prognosis"] = encoder.fit_transform(data["prognosis"])
    X = data.iloc[:, :-1]
    y = data.iloc[:, -1]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=24)

    selected_algorithm = var.get()
    if selected_algorithm == "SVM":
        model = SVC()
    elif selected_algorithm == "Naive Bayes":
        model = GaussianNB()
    elif selected_algorithm == "Random Forest":
        model = RandomForestClassifier(random_state=18)
    else:
        tb2.insert(tk.END, "Please select an algorithm!\n")
        return

    # Training the model
    model.fit(X_train, y_train)
    preds = model.predict(X_test)

    # Calculating accuracy
    accuracy = accuracy_score(y_test, preds) * 100
    tb2.insert(tk.END, f"Accuracy using {selected_algorithm}: {accuracy:.2f}%\n")

    # Displaying confusion matrix
    cf_matrix = confusion_matrix(y_test, preds)
    plot_confusion_matrix(cf_matrix, selected_algorithm)


# Function to plot and embed confusion matrix
def plot_confusion_matrix(cf_matrix, algorithm_name):
    fig, ax = plt.subplots(figsize=(8, 6))
    sns.heatmap(cf_matrix, annot=True, fmt="d", ax=ax)
    ax.set_title(f"Confusion Matrix for {algorithm_name}")

    # Embed the plot in the Tkinter window
    canvas = FigureCanvasTkAgg(fig, master=win)
    canvas.get_tk_widget().place(x=800, y=200)
    canvas.draw()


# Adding buttons for applying the algorithm
b2 = tk.Button(win, text="Apply Algorithm", command=apply_algorithm, font=("Arial", 12))
b2.grid(row=19, column=1)

# Adding a scrollable output box
l3 = tk.Label(win, text="OUTPUT:", font=("Arial", 12), bg="#f0f0f0")
l3.grid(row=20, column=0)

scrollbar = Scrollbar(win)
scrollbar.place(x=720, y=200, height=400)

tb2 = tk.Text(win, height=25, width=100, yscrollcommand=scrollbar.set)
tb2.place(x=21, y=200)
scrollbar.config(command=tb2.yview)


# Function to clear the output box
def clear_output():
    tb2.delete(1.0, tk.END)


# Function to reset the application
def reset_app():
    tb2.delete(1.0, tk.END)
    tb1.delete(1.0, tk.END)
    tb1.insert(tk.END, "File path")


# Adding Clear and Reset buttons
b_clear = tk.Button(win, text="Clear Output", command=clear_output, font=("Arial", 12))
b_clear.grid(row=22, column=1)

b_reset = tk.Button(win, text="Reset App", command=reset_app, font=("Arial", 12))
b_reset.grid(row=22, column=2)

# Run the application
win.mainloop()
